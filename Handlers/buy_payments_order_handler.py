from aiogram import Router, F
from aiogram import Bot,  types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice, Message, PreCheckoutQuery

from DataBase.crud import checking_reg_table, update_status_table
from States.user_state import BuyOrderStater

from Handlers.Payments.payments_text import prices, provider_token


router = Router()


# –ö–æ–º–∞–Ω–¥–∞ /buy
@router.message(F.text.startswith("/pay"))
async def buy_order_cmd(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(BuyOrderStater.order_id)
    try:
        id_in_text = int(message.text.replace('/pay', ''))
    except ValueError:
        await message.answer("üí≥ **–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n"
                             "`/pay <ID>`\n\n"
                             "–ì–¥–µ `<ID>` ‚Äî —ç—Ç–æ **–∞–π–¥–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞**.\n\n"
                             "–ü—Ä–∏–º–µ—Ä: `/pay 12345`\n\n"
                             "üìã /my_bookings ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
                             "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º! üòä")
    else:

        check_id = await checking_reg_table(message.chat.id, id_in_text)

        if check_id:
            await state.update_data(order_id=id_in_text)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å (—Å—á–µ—Ç)
            title = "–ü–ª–∞—Ç–µ–∂"
            description = "–û–ø–ª–∞—Ç–∞ –∑–∞ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
            payload = "–£—Å–ø–µ—à–Ω—ã–π –ü–ª–∞—Ç–µ–∂"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
            currency = "RUB"  # –í–∞–ª—é—Ç–∞ (—Ä—É–±–ª–∏)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
            await message.answer_invoice(
                title=title,
                description=description,
                payload=payload,
                provider_token=provider_token,
                currency=currency,
                prices=prices,
            )
        else:
            await message.answer("üí≥ **–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n"
        "`/pay <ID>`\n\n"
        "–ì–¥–µ `<ID>` ‚Äî —ç—Ç–æ **–∞–π–¥–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞**.\n\n"
        "–ü—Ä–∏–º–µ—Ä: `/pay 12345`\n\n"
        "üìã /my_bookings ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º! üòä")



# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    await pre_checkout_query.answer(ok=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@router.message(lambda message: message.successful_payment is not None)
async def process_successful_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    await update_status_table(message.chat.id, order_id)
    await message.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    await state.clear()