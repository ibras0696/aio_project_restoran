from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from DataBase.crud import register_table_rest
from Keyboards.user_keyboards import reply_contact_button
# –°–æ—Å—Ç–æ—è–Ω–∏—è
from States.user_state import RegisterOrderState

from Handlers.Function.date_function import check_datetime_format

router = Router()


@router.message(Command('book'))
async def book_cmd(message: Message, state: FSMContext):
    # –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    await state.set_state(RegisterOrderState.name)
    await state.update_data(user_id=message.chat.id)
    await state.update_data(paid=False)

    await message.answer("üë§ **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:**\n\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
    "–ù–∞–ø—Ä–∏–º–µ—Ä: `–ò–±—Ä–∞—Ö–∏–º` –∏–ª–∏ `–°–∞–Ω–µ—Ç`.\n\n"
    "–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å! üòä")


@router.message(RegisterOrderState.name)
async def book_name_cmd(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(RegisterOrderState.phone)

    await message.answer(text="üìû **–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:**\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `+79991234567` –∏–ª–∏ `89991234567`.\n\n"
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ! üòä", reply_markup=reply_contact_button)


@router.message(RegisterOrderState.phone)
async def book_phone_cmd(message: Message, state: FSMContext):
    message_text_send = ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "üïí **–ü—Ä–∏–º–µ—Ä:** `20:30-01.12.24`\n\n"
            "–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –æ–∑–Ω–∞—á–∞–µ—Ç:\n"
            "- `20:30` ‚Äî –≤—Ä–µ–º—è (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã)\n"
            "- `01.12.24` ‚Äî –¥–∞—Ç–∞ (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üòä")
    try:
        await state.update_data(phone=message.contact.phone_number)
    except AttributeError:
        await state.update_data(phone=message.text)
    finally:
        await state.set_state(RegisterOrderState.date_time)
        await message.answer(message_text_send)



@router.message(RegisterOrderState.date_time)
async def book_date_time_cmd(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    check_data = await check_datetime_format(message.text)
    if check_data:
        await state.update_data(date_time=message.text)
        await state.set_state(RegisterOrderState.people_count)

        await message.answer(text="üë• **–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π:**\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `2` ‚Äî –¥–ª—è –¥–≤–æ–∏—Ö, `4` ‚Äî –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —á–µ–ª–æ–≤–µ–∫.\n\n"
        "–ú—ã –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –≤–µ—á–µ—Ä –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º! üç£")
    else:
        await state.set_state(RegisterOrderState.date_time)
        await message.answer(text="‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!** ‚ùå\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "üïí **–ü—Ä–∏–º–µ—Ä:** `20:30-01.12.24`\n\n"
        "–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –æ–∑–Ω–∞—á–∞–µ—Ç:\n"
        "- `20:30` ‚Äî –≤—Ä–µ–º—è (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã)\n"
        "- `01.12.24` ‚Äî –¥–∞—Ç–∞ (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üòä")


@router.message(RegisterOrderState.people_count)
async def book_people_count(message: Message, state: FSMContext):
    error_send_message = ("‚ùå **–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!** ‚ùå\n\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ **–≤ —Ü–∏—Ñ—Ä–∞—Ö**.\n\n"
    "–ù–∞–ø—Ä–∏–º–µ—Ä: `2` ‚Äî –¥–ª—è –¥–≤–æ–∏—Ö, `10` ‚Äî –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –¥–µ—Å—è—Ç–∏ —á–µ–ª–æ–≤–µ–∫.\n\n"
    "–¢–∞–∫–∂–µ –°—Ç–æ–ª–∏–∫–∏ –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—É –Ω–µ –±–æ–ª—å—à–µ 30 —á–µ–ª–æ–≤–µ–∫! "
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üòä")
    try:
        result_count = int(message.text)
    except ValueError:
        await state.set_state(RegisterOrderState.people_count)
        await message.answer(error_send_message)
    else:
        if result_count < 0 or result_count >= 30:
            await state.set_state(RegisterOrderState.people_count)
            await message.answer(error_send_message)
            return

        await state.update_data(people_count=result_count)

        data_order = await state.get_data()
        user_id = data_order.get('user_id')
        name = data_order.get('name')
        phone = data_order.get('phone')
        date_time = data_order.get('date_time')
        people_count = data_order.get('people_count')

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ë—Ä–æ–Ω–∏ –≤ –ë–î
        await register_table_rest(
            user_id=user_id,
            name=name,
            phone=phone,
            date_time=date_time,
            people_count=people_count
        )

        await message.answer(text="üéâ **–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!** üéâ\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
            "üí≥ `/pay <ID>` ‚Äî —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! –ú—ã –∂–¥–µ–º –≤–∞—Å! üç£")

        await state.clear()
