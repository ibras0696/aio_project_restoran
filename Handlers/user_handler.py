from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from DataBase.crud import get_register_table_true, get_register_table_false

router = Router()


@router.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    await state.clear()
    
    welcome_message = (
        "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤ –≤ ¬´–Ø–ø–æ–Ω–∞ –•–∞—Ç–∞¬ª! üå∏\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìÖ /book ‚Äî –ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞\n"
        "üìã /my_bookings ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚ùå /cancel_booking <ID> ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "üí≥ /pay <ID> ‚Äî –û–ø–ª–∞—Ç–∏—Ç—å –±—Ä–æ–Ω—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —É–¥–æ–±—Å—Ç–≤–æ–º! üç£"
    )
    await message.answer(text=welcome_message)

@router.message(Command('my_bookings'))
async def bookings_get_cmd(message: Message,state: FSMContext):
    await state.clear()

    tg_id = message.chat.id
    result_true = await get_register_table_true(tg_id)
    result_false = await get_register_table_false(tg_id)


    for key, value in result_true.items():
        txt = '\n\n–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏\n\n'
        if len(value) != 0 and key is not None:
            txt += (f'\nüî∑ ID –ë—Ä–æ–Ω–∏: {key}'
                    f'\nüë§ TG_ID: {value.get('user_id')}'
                    f'\nüìõ –ò–º—è: {value.get('name')}'
                    f'\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {value.get('phone')}'
                    f'\n‚è∞ –í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {value.get('date_time')}'
                    f'\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: {value.get('people_count')}'
                    f'\nüí∞ –°—Ç–∞—Ç—É—Å: {"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if value.get('paid') else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"}')
        await message.answer(text=f'{txt}')


    for key, value in result_false.items():
        txt = '\n\n–ù–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏\n\n'
        if len(value) != 0 and key is not None:
            txt += (f'\nüî∑ ID –ë—Ä–æ–Ω–∏: {key}'
                    f'\nüë§ TG_ID: {value.get('user_id')}'
                    f'\nüìõ –ò–º—è: {value.get('name')}'
                    f'\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {value.get('phone')}'
                    f'\n‚è∞ –í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {value.get('date_time')}'
                    f'\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: {value.get('people_count')}'
                    f'\nüí∞ –°—Ç–∞—Ç—É—Å: {"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if value.get('paid') else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"}')
        await message.answer(text=f'{txt}')
